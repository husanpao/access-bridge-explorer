# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test and package a WPF or Windows Forms desktop application
# built on .NET Framework 4.0.
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Framework Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: AccessBridgeExplorer.sln
      Project_Path: src\AccessBridgeExplorer\AccessBridgeExplorer.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install .NET Framework 4.0 targeting pack
    - name: Install .NET Framework 4.0 targeting pack
      run: |
        # Install .NET Framework 4.0 targeting pack using chocolatey
        choco install netfx-4.0-devpack -y
        # Alternatively, install via direct download if chocolatey fails
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Chocolatey installation failed, trying direct download..."
          $url = "https://download.microsoft.com/download/A/4/1/A4151A3C-3A91-4181-B3F2-3324B6C6B4A4/NDP40-KB2600211-x86-x64-AllOS-ENU.exe"
          $output = "$env:TEMP\NDP40-KB2600211-x86-x64-AllOS-ENU.exe"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process -FilePath $output -ArgumentList "/quiet" -Wait
        }

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Build the solution
    - name: Build solution
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform="Any CPU"
      env:
        Configuration: ${{ matrix.configuration }}

    # Restore NuGet packages
    - name: Restore NuGet packages
      run: msbuild $env:Solution_Name /t:Restore

    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: AccessBridgeExplorer-${{ matrix.configuration }}
        path: bin\${{ matrix.configuration }}\
