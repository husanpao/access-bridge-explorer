# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test and package a WPF or Windows Forms desktop application
# built on .NET Framework 4.0.
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Framework Desktop

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: AccessBridgeExplorer.sln
      Project_Path: src\AccessBridgeExplorer\AccessBridgeExplorer.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install .NET Framework 4.0 Reference Assemblies
    - name: Install .NET Framework 4.0 Reference Assemblies
      run: |
        # Install NuGet package that contains .NET Framework 4.0 reference assemblies
        Write-Host "Installing .NET Framework 4.0 reference assemblies via NuGet..."
        nuget install Microsoft.NETFramework.ReferenceAssemblies.net40 -OutputDirectory packages -NonInteractive
        
        # Copy reference assemblies to the expected location
        $packagePath = Get-ChildItem -Path "packages\Microsoft.NETFramework.ReferenceAssemblies.net40*" | Select-Object -First 1
        $refAssembliesSource = Join-Path $packagePath.FullName "build\.NETFramework\v4.0"
        $refAssembliesTarget = "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0"
        
        if (Test-Path $refAssembliesSource) {
          Write-Host "Copying reference assemblies to: $refAssembliesTarget"
          New-Item -ItemType Directory -Path $refAssembliesTarget -Force
          Copy-Item -Path "$refAssembliesSource\*" -Destination $refAssembliesTarget -Recurse -Force
        } else {
          Write-Host "Reference assemblies source not found at: $refAssembliesSource"
        }

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Build the solution
    - name: Build solution
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform="Any CPU"
      env:
        Configuration: ${{ matrix.configuration }}

    # Restore NuGet packages
    - name: Restore NuGet packages
      run: msbuild $env:Solution_Name /t:Restore

    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: AccessBridgeExplorer-${{ matrix.configuration }}
        path: bin\${{ matrix.configuration }}\

  release:
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: AccessBridgeExplorer-Release
        path: release-artifacts
        
    - name: Create Release Archive
      run: |
        # 创建发布包
        $version = "${{ github.ref_name }}"
        $archiveName = "AccessBridgeExplorer-$version.zip"
        
        # 压缩Release构建产物
        Compress-Archive -Path "release-artifacts\*" -DestinationPath $archiveName
        
        # 输出文件信息供后续步骤使用
        echo "ARCHIVE_NAME=$archiveName" >> $env:GITHUB_ENV
        echo "VERSION=$version" >> $env:GITHUB_ENV
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Access Bridge Explorer ${{ env.VERSION }}
        body: |
          ## Access Bridge Explorer ${{ env.VERSION }}
          
          ### 下载
          - [AccessBridgeExplorer-${{ env.VERSION }}.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/AccessBridgeExplorer-${{ env.VERSION }}.zip) - 完整应用程序包
          
          ### 更新内容
          请查看 [CHANGES.md](https://github.com/${{ github.repository }}/blob/master/CHANGES.md) 了解详细的更新内容。
          
          ### 系统要求
          - Windows 7 或更高版本
          - .NET Framework 4.0 或更高版本
          - Java Access Bridge (通常随Java一起安装)
        files: |
          ${{ env.ARCHIVE_NAME }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
